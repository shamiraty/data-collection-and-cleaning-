# SECTION A:

## NULL VALUES / COLUMNS DETECTION AND TREATMENT TECHNIQUES

- Loading Dataset
- Finding Frequency of Clean and Null Values
- Visualizing Null Values with Graphs and Tables
- Null Value Treatment Strategies


IMPORT LIBRARIES
import pandas as pd
import plotly.graph_objects as go
import numpy as np
from scipy.stats import norm, zscore
from sklearn.neighbors import LocalOutlierFactor
from sklearn.ensemble import IsolationForest
import plotly.express as px
from sklearn.impute import SimpleImputer

1. NULL VALUES/COLUMNS DETECTION AND TREATMENT
1.1 LOAD DATASET

('datasets2.
# Load dataset
df = pd.read_csv('datasets2.csv')
df.tail()

1.2 FREQUENCY / PERCENT OF CLEAN AND NULL VALUES

# Calculate null counts and clean data counts
null_counts = df['age'].isnull().sum()
clean_data_counts = df['age'].notnull().sum()
# Calculate percentages
total_count = len(df)
percent_null = (null_counts / total_count) * 100
percent_clean = (clean_data_counts / total_count)

# Create a DataFrame for visualization
data = {
    'Type': ['Null', 'Clean'],
    'Count': [null_counts, clean_data_counts],
    'Percentage': [percent_null, percent_clean]
}
df_visualize = pd.DataFrame(data)

print(df_visualize)
print(df_visualize)
    Type  Count  Percentage
0   Null     42         4.2
1  Clean    958        95.8


1.3 SIMPLE BAR GRAPH TO VISUALIZE NULL FIELDS

    labels={'Type': 'Data Type', 'Count': 'Count', 'Percentage': 'Percentage (%)'},
             title='Frequency and Percentage of Null and Clean Data in Age Column',
             color='Type',
             hover_data={'Percentage': ':.2f%'})

# Update layout for customization
fig.update_layout(
    xaxis_title='',
    yaxis_title='Count',
    plot_bgcolor='rgba(0,0,0,0)',  # Remove background color
    xaxis=dict(showgrid=True, gridwidth=1, gridcolor='skyblue'),  # Add x-axis gridlines
    yaxis=dict(showgrid=True, gridwidth=1, gridcolor='skyblue'),  # Add y-axis gridlines
)
fig.show()
# Create a bar plot figure
fig = px.bar(df_visualize, x='Type', y='Count', text='Percentage',
             labels={'Type': 'Data Type', 'Count': 'Count', 'Percentage': 'Percentage (%)'},
             title='Frequency and Percentage of Null and Clean Data in Age Column',
             color='Type',
             hover_data={'Percentage': ':.2f%'})
​
# Update layout for customization
fig.update_layout(
    xaxis_title='',
    yaxis_title='Count',
    plot_bgcolor='rgba(0,0,0,0)',  # Remove background color
    xaxis=dict(showgrid=True, gridwidth=1, gridcolor='skyblue'),  # Add x-axis gridlines
    yaxis=dict(showgrid=True, gridwidth=1, gridcolor='skyblue'),  # Add y-axis gridlines
)
fig.show()


1.4 SIMPLE BAR GRAPH TO VISUALIZE NULL FIELDS

null_counts = df.isnull().sum()
# Create bar plot figure
fig = px.bar(
    x=null_counts.index,
    y=null_counts.values,
    labels={'x': 'Columns', 'y': 'Null Count'},
    title='Count of Null Values by Column',
)
fig.update_layout(
    plot_bgcolor='rgba(0,0,0,0)',)
# Add gridlines
fig.update_xaxes(showgrid=True, gridwidth=1, gridcolor='blue')
fig.update_yaxes(showgrid=True, gridwidth=1, gridcolor='blue')
fig.show()




1.5 VISUALIZE NULL FIELD BY TABLE

# Before imputation (if there were missing values)
print(df[df['age'].isnull()])



1.6 TREAT NULL FIELD BY AVERAGE MEAN, MEDIAN OR MODE

# Apply imputation
imputer = SimpleImputer(strategy='mean')
​
#fit: calculate the mean  mean =41.89  median =42.0   mode=33.0
#transform: Replaces the missing values with the calculated mean
df['age'] = imputer.fit_transform(df[['age']])
​
# After imputation (check if there are still any missing values)
print("After imputation:")
print(df[df['age'].isnull()])
​
# NB: The strategy can also be 'median', 'most_frequent', or 'constant' (with a user-specified value).
​
After imputation:
Empty DataFrame
Columns: [firstname, age, resident]
Index: []
df.head()
df.head

#other  techniques

# Mean imputation
df['age'].fillna(df['age'].mean(), inplace=True)

# Median imputation
df['age'].fillna(df['age'].median(), inplace=True)

# Mode imputation (for categorical numeric data)
df['age'].fillna(df['age'].mode()[0], inplace=True)

df.head()


1.6.1 Visualize Null Fields after Treatment

null_counts = df.isnull().sum()
# Create bar plot figure
fig = px.bar(
    x=null_counts.index,
    y=null_counts.values,
    labels={'x': 'Columns', 'y': 'Null Count'},
    title='Count of Null Values by Column',
)
fig.update_layout(
    plot_bgcolor='rgba(0,0,0,0)',)
# Add gridlines
fig.update_xaxes(showgrid=True, gridwidth=1, gridcolor='green')
fig.update_yaxes(showgrid=True, gridwidth=1, gridcolor='green')
fig.show()



SECTION B
OUTLIERS DETECTION AND TREATMENT TECHNIQUES
Isolation Forest (Contamination)
Local Outlier Factor (LOF)
Normal Distributions and Z-scores (X ~ N(40,1))
Quartiles
Percentile-Based Method
Outliers Treatment Techniques (Winsorization)
2. OUTLIERS DETECTION TECHNIQUES
2.1 NORMAL DISTRIBUTION & Z-SCORES

import numpy as np
import pandas as pd
import plotly.graph_objects as go
from scipy.stats import norm, zscore
​
max_age = df['age'].max()
min_age = df['age'].min()
mean_age = df['age'].mean()
std_age = df['age'].std()
​
# Create figure for PDF
fig_pdf = go.Figure()
​
# Plot Normal distribution curve
x_values = np.linspace(min_age, max_age, 100)
normal_pdf = norm.pdf(x_values, mean_age, std_age)
fig_pdf.add_trace(go.Scatter(x=x_values, y=normal_pdf, mode='lines', name='Normal Distribution', line=dict(color='blue')))
​
# Highlight outliers using z-scores
z_scores = zscore(df['age'])
outliers = df[(z_scores < -3) | (z_scores > 3)]
fig_pdf.add_trace(go.Scatter(x=outliers['age'], y=[0]*len(outliers), mode='markers', name='Outliers', marker=dict(color='red', size=10)))
​
# Add vertical lines for mean and outlier thresholds
fig_pdf.add_vline(x=mean_age, line_dash="dash", line_color="red", name='Mean')
fig_pdf.add_vline(x=mean_age - 3*std_age, line_dash="dot", line_color="blue", name='Lower Threshold')
fig_pdf.add_vline(x=mean_age + 3*std_age, line_dash="dot", line_color="blue", name='Upper Threshold')
​
# Highlight typical range with a shaded rectangle
fig_pdf.add_vrect(
    x0=mean_age - 3*std_age, 
    x1=mean_age + 3*std_age, 
    fillcolor='rgba(0,100,80,0.2)', 
    line_width=0, 
    opacity=0.5,
    annotation_text='Typical Range'
)
​
# Add annotations for mean, thresholds, and any important points
fig_pdf.add_annotation(
    x=mean_age, 
    y=max(normal_pdf), 
    text="Mean", 
    showarrow=True, 
    arrowhead=1, 
    xshift=10
)
fig_pdf.add_annotation(
    x=mean_age - 3*std_age, 
    y=0.02, 
    text="Outlier Threshold (-3)", 
    showarrow=True, 
    arrowhead=1, 
    xshift=-10
)
fig_pdf.add_annotation(
    x=mean_age + 3*std_age, 
    y=0.02, 
    text="Outlier Threshold (3)", 
    showarrow=True, 
    arrowhead=1, 
    xshift=10
)
​
# Update layout for aesthetics
fig_pdf.update_layout(
    title='Probability Density Function (PDF) of Age',
    xaxis_title='Age',
    yaxis_title='Density',
    showlegend=True,
    plot_bgcolor='rgba(0,0,0,0)',  # Transparent background
    xaxis=dict(showgrid=True, gridwidth=1, gridcolor='skyblue'),
    yaxis=dict(showgrid=True, gridwidth=1, gridcolor='skyblue')
)
​
fig_pdf.show()
​


2.2 BOX PLOT

# Box Plot of Age
fig_box = go.Figure()
fig_box.add_trace(go.Box(y=df['age'], boxpoints='outliers', marker_color='blue', name='Age Distribution'))
​
# Add quartile annotations
quartiles = np.percentile(df['age'], [25, 50, 75])
quartile_text = [f"Q{i}: {quartile:.2f}" for i, quartile in enumerate(quartiles, start=1)]
fig_box.add_trace(go.Scatter(x=[None], y=[None], mode='markers', marker=dict(color='white', size=0), name=', '.join(quartile_text)))
fig_box.update_layout(
    title='Box Plot of Age',
    xaxis_title='Age',
    yaxis_title='',
    showlegend=True,
    plot_bgcolor='rgba(0,0,0,0)',  # Remove background color
     xaxis=dict(showgrid=True, gridwidth=1, gridcolor='skyblue'),  # Add x-axis gridlines
    yaxis=dict(showgrid=True, gridwidth=1, gridcolor='skyblue'),  # Add y-axis gridlines
    height=400,  # Adjust plot height
)
fig_box.show()


2.3 ISOLATION FOREST

# Fit the Isolation Forest model
iso_forest = IsolationForest(contamination=0.01, random_state=42)
iso_forest.fit(df[['age']])
df['anomaly'] = iso_forest.predict(df[['age']])
​
# Identify outliers
iso_outliers = df[df['anomaly'] == -1]
​
print(iso_outliers)


2.3.1 VISUALIZE ISOLATION FOREST SCATTER PLOT

scatter_fig = px.scatter(df, x=df.index, y='age', color='anomaly',
                         color_discrete_map={1: 'blue', -1: 'red'},
                         labels={'color': 'Anomaly'})
​
scatter_fig.update_layout(
    title='Scatter Plot of Age with Anomalies Highlighted',
    xaxis_title='Index',
    yaxis_title='Age',
    showlegend=True,
    plot_bgcolor='rgba(0,0,0,0)',  # Remove background color
    xaxis=dict(showgrid=True, gridwidth=1, gridcolor='skyblue'),  # Add x-axis gridlines
    yaxis=dict(showgrid=True, gridwidth=1, gridcolor='skyblue'),  # Add y-axis gridlines
)
​
scatter_fig.show()




2.3.2 VISUALIZE ISOLATION FOREST BOX PLOT

box_fig = px.box(df, x='anomaly', y='age', color='anomaly',
                 color_discrete_map={1: 'blue', -1: 'red'},
                 labels={'anomaly': 'Anomaly', 'age': 'Age'})
​
box_fig.update_layout(
    title='Box Plot of Age with Anomalies Highlighted',
    xaxis_title='Anomaly',
    yaxis_title='Age',
    showlegend=True,
    plot_bgcolor='rgba(0,0,0,0)',  # Remove background color
    xaxis=dict(showgrid=True, gridwidth=1, gridcolor='skyblue'),  # Add x-axis gridlines
    yaxis=dict(showgrid=True, gridwidth=1, gridcolor='skyblue'),  # Add y-axis gridlines
)
box_fig.show()




2.4 LOCAL OUTLIER FACTOR (LOF)

# Fit the Local Outlier Factor (LOF) model
lof = LocalOutlierFactor(n_neighbors=20, contamination=0.01)
df['lof_anomaly'] = lof.fit_predict(df[['age']])
lof_outliers = df[df['lof_anomaly'] == -1]
2.4.1 VISUALIZE ( LOF ) SCATTER PLOT

scatter_fig_lof = px.scatter(df, x=df.index, y='age', color='lof_anomaly',
                             color_discrete_map={1: 'blue', -1: 'red'},
                             labels={'color': 'Anomaly'})
​
scatter_fig_lof.update_layout(
    title='Scatter Plot of Age with LOF Anomalies Highlighted',
    xaxis_title='Index',
    yaxis_title='Age',
    showlegend=True,
    plot_bgcolor='rgba(0,0,0,0)',  # Remove background color
    xaxis=dict(showgrid=True, gridwidth=1, gridcolor='skyblue'),  # Add x-axis gridlines
    yaxis=dict(showgrid=True, gridwidth=1, gridcolor='skyblue'),  # Add y-axis gridlines
)
scatter_fig_lof.show()



2.4.2 VISUALIZE ( LOF ) BOX PLOT

box_fig_lof = px.box(df, x='lof_anomaly', y='age', color='lof_anomaly',
                     color_discrete_map={1: 'blue', -1: 'red'},
                     labels={'lof_anomaly': 'Anomaly', 'age': 'Age'})
box_fig_lof.update_layout(
    title='Box Plot of Age with Anomalies Highlighted',
    xaxis_title='Anomaly',
    yaxis_title='Age',
    showlegend=True,
    plot_bgcolor='rgba(0,0,0,0)',  # Remove background color
    xaxis=dict(showgrid=True, gridwidth=1, gridcolor='skyblue'),  # Add x-axis gridlines
    yaxis=dict(showgrid=True, gridwidth=1, gridcolor='skyblue'),  # Add y-axis gridlines
)
box_fig_lof.show()
print(lof_outliers)


2.5 PERCENTILE-BASED METHOD

# Define thresholds for top and bottom percentiles
top_percentile = 95
bottom_percentile = 5
​
# Calculate percentile values
top_threshold = np.percentile(df['age'], top_percentile)
bottom_threshold = np.percentile(df['age'], bottom_percentile)
​
# Identify outliers
percentile_outliers_top = df[df['age'] > top_threshold]
percentile_outliers_bottom = df[df['age'] < bottom_threshold]
# Print outliers
print("Top Percentile Outliers")
print(percentile_outliers_top.head())




SECTION C
OUTLIERS TREATMENT TECHNIQUES
3. WINSORIZATION

# Define the percentile values for Winsorization
winsor_percentile = 5  # Set to 5th and 95th percentile for lower and upper bounds
​
# Calculate Winsorization bounds
lower_bound = np.percentile(df['age'], winsor_percentile)
upper_bound = np.percentile(df['age'], 100 - winsor_percentile)
​
# Winsorization
df['age_winsorized'] = df['age'].clip(lower=lower_bound, upper=upper_bound)
​
# Concatenate original and winsorized data along columns axis
concatenated_df = pd.concat([df[['age']], df[['age_winsorized']]], axis=1)
concatenated_df.columns = ['Original Age', 'Winsorized Age']
​
# Display concatenated data
print(concatenated_df)
























































